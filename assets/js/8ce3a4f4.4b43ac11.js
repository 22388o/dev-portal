"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[1],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(r),f=o,m=d["".concat(c,".").concat(f)]||d[f]||u[f]||i;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},344:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],l={title:"Unlocker",sidebar_position:4},c=void 0,s={unversionedId:"provider/unlocker",id:"provider/unlocker",isDocsHomePage:!1,title:"Unlocker",description:"The unlocker is a service coming as a binary that lets you automatically unlock your running daemon once it is initialized.",source:"@site/docs/provider/unlocker.md",sourceDirName:"provider",slug:"/provider/unlocker",permalink:"/docs/provider/unlocker",editUrl:"https://github.com/tdex-network/dev-portal/edit/master/docs/provider/unlocker.md",version:"current",sidebarPosition:4,frontMatter:{title:"Unlocker",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Registry",permalink:"/docs/provider/registry"}},p=[{value:"Unlock with file",id:"unlock-with-file",children:[]}],u={toc:p};function d(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The unlocker is a service coming as a binary that lets you automatically unlock your running daemon once it is initialized."),(0,i.kt)("p",null,"This service sources the unlocking password from one of the supported providers. It's possible to select the preferred provider with the flag ",(0,i.kt)("inlineCode",{parentName:"p"},"--provider providerType"),".",(0,i.kt)("br",{parentName:"p"}),"\n","Following is the list of supported ",(0,i.kt)("inlineCode",{parentName:"p"},"providerType"),"s:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#unlock-with-file"},"file")," to source from local file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"aws")," to source from AWS KMS service (Coming soon)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"vault")," to source from Hashicorp Vault (Coming soon)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k8s")," to source from Kubernetes (Coming soon)")),(0,i.kt)("p",null,"Along with the password, these providers also provide a way to possibly source a TLS certificate (generated by the daemon) in case the communication needs to be encrypted."),(0,i.kt)("p",null,"You can see the full list of supported flags anytime with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ unlockerd --help\n")),(0,i.kt)("h2",{id:"unlock-with-file"},"Unlock with file"),(0,i.kt)("p",null,"The file provider is the default one used by the unlocker. "),(0,i.kt)("p",null,"It requires you to specify a path of the file containing the password in plaintext to use for unlocking the daemon with the flag ",(0,i.kt)("inlineCode",{parentName:"p"},"--password_path"),"."),(0,i.kt)("p",null,"By default, this provider also assumes that the daemon's datadir has not been customized, therefore it looks within its default datadir path to possibly load the TLS certificate created by the daemon needed by the unlocker to establish a secure connection.",(0,i.kt)("br",{parentName:"p"}),"\n","Anyways, it's possible to specify the path of the TLS certificate with the flag ",(0,i.kt)("inlineCode",{parentName:"p"},"--tls_cert_path")," if you have it somewhere else.",(0,i.kt)("br",{parentName:"p"}),"\n","In case the daemon is running in ",(0,i.kt)("em",{parentName:"p"},"no macaroons")," mode, this provider shouldn't find any certificate in the daemon's datadir, signaling the unlocker that no TLS termination is required. "),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# create the pwd file\n$ echo "mysecretpassword" > pwd.txt\n\n#\xa0start unlockerd with given password file and default TLS cert path\n$ unlockerd --password_path pwd.txt\n\n# start unlockerd with given password and TLS certificate\n$ unlockerd --password_path pwd.txt --tls_cert_path ~/path/to/cert.pem\n')))}d.isMDXComponent=!0}}]);