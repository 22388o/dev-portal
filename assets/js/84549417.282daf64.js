"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[6509],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(h,o(o({ref:n},l),{},{components:t})):a.createElement(h,o({ref:n},l))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4650:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=["components"],s={title:"BOTD#3: Swap"},p="Swap protocol",c={unversionedId:"specs/swap-protocol",id:"specs/swap-protocol",isDocsHomePage:!1,title:"BOTD#3: Swap",description:"Overview",source:"@site/docs/specs/03-swap-protocol.md",sourceDirName:"specs",slug:"/specs/swap-protocol",permalink:"/docs/specs/swap-protocol",editUrl:"https://github.com/tdex-network/dev-portal/edit/master/docs/specs/03-swap-protocol.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"BOTD#3: Swap"},sidebar:"tutorialSidebar",previous:{title:"BOTD#2: Transport",permalink:"/docs/specs/transport-protocol"},next:{title:"BOTD#4: Trade",permalink:"/docs/specs/trade-protocol"}},l=[{value:"Overview",id:"overview",children:[]},{value:"Swap",id:"swap",children:[{value:"Data Structures",id:"data-structures",children:[]},{value:"SwapRequest",id:"swaprequest",children:[]},{value:"SwapAccept",id:"swapaccept",children:[]},{value:"SwapComplete",id:"swapcomplete",children:[]},{value:"SwapFail",id:"swapfail",children:[]}]}],d={toc:l};function u(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"swap-protocol"},"Swap protocol"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"swap protocol")," defines the process by which two parties conclude an atomic swap using an interactive exchange of signed messages and Elements transaction."),(0,r.kt)("p",null,"Identifying with ",(0,r.kt)("em",{parentName:"p"},"Alice")," as the ",(0,r.kt)("strong",{parentName:"p"},"Proposer")," and ",(0,r.kt)("em",{parentName:"p"},"Bob")," the ",(0,r.kt)("strong",{parentName:"p"},"Responder"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Alice connects to Bob through secure transport layer and encrypted connection."),(0,r.kt)("li",{parentName:"ol"},"Alice proposes a swap crafting an unsigned transaction and a message defined as sending ",(0,r.kt)("inlineCode",{parentName:"li"},"AMOUNT_P")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"ASSET_P")," and receiving ",(0,r.kt)("inlineCode",{parentName:"li"},"AMOUNT_R")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"ASSET_R"),". If confidential, the blinding keys need to be included."),(0,r.kt)("li",{parentName:"ol"},"Alice sends to Bob the ",(0,r.kt)("inlineCode",{parentName:"li"},"SwapRequest")," message containing the unsingned transaction. An additional input and eventual change output needed to pay ",(0,r.kt)("em",{parentName:"li"},"half")," of the network fees is included by Alice in the transaction."),(0,r.kt)("li",{parentName:"ol"},"Bob, if accepts the terms, funds the swap and partially signs the proposed transaction and includes his blinding keys too."),(0,r.kt)("li",{parentName:"ol"},"Bob sends back to Alice the ",(0,r.kt)("inlineCode",{parentName:"li"},"SwapAccept")," message containing the partially signed transaction. An additional input and eventual change output needed to pay the remaining ",(0,r.kt)("em",{parentName:"li"},"half")," of the network fees is included by Bob in the transaction."),(0,r.kt)("li",{parentName:"ol"},"Alice parses the accepted swap and signs the transaction."),(0,r.kt)("li",{parentName:"ol"},"Alice sends to Bob the ",(0,r.kt)("inlineCode",{parentName:"li"},"SwapComplete")," message containing the signed transaction."),(0,r.kt)("li",{parentName:"ol"},"Ideally Bob finalizes and broadcast the transaction to the Liquid network.")),(0,r.kt)("h2",{id:"swap"},"Swap"),(0,r.kt)("h3",{id:"data-structures"},"Data Structures"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"syntax = \"proto3\";\n\nmessage SwapRequest {\n  // Random unique identifier for the current message\n  string id = 1;\n  // The proposer's quantity\n  uint64 amount_p = 2;\n  // The proposer's asset hash\n  string asset_p = 3;\n  // The responder's quantity\n  uint64 amount_r = 4;\n  // The responder's asset hash\n  string asset_r = 5;\n  // The proposer's unsigned transaction in PSET format (base64 string)\n  string transaction = 6;\n  // In case of a confidential transaction the blinding key of each confidential\n  // input is included. Each blinding key is identified by the prevout script\n  // hex encoded.\n  map<string, bytes> input_blinding_key = 7;\n  // In case of a confidential transaction the blinding key of each confidential\n  // output is included. Each blinding key is identified by the output script\n  // hex encoded.\n  map<string, bytes> output_blinding_key = 8;\n}\n\nmessage SwapAccept {\n  // Random unique identifier for the current message\n  string id = 1;\n  // indetifier of the SwapRequest message\n  string request_id = 2;\n  // The partial signed transaction base64 encoded containing the Responder's\n  // signed inputs in a PSET format\n  string transaction = 3;\n  // In case of a confidential transaction the blinding key of each confidential\n  // input is included. Each blinding key is identified by the prevout script\n  // hex encoded.\n  map<string, bytes> input_blinding_key = 4;\n  // In case of a confidential transaction the blinding key of each confidential\n  // output is included. Each blinding key is identified by the output script\n  // hex encoded.\n  map<string, bytes> output_blinding_key = 5;\n}\n\nmessage SwapComplete {\n  // Random unique identifier for the current message\n  string id = 1;\n  // indetifier of the SwapAccept message\n  string accept_id = 2;\n  // The signed transaction base64 encoded containing the Proposers's signed\n  // inputs in a PSET format\n  string transaction = 3;\n}\n\nmessage SwapFail {\n  // Random unique identifier for the current message\n  string id = 1;\n  // indetifier of either SwapRequest or SwapAccept message. It can be empty\n  string message_id = 2;\n  // The failure code. It can be empty\n  uint32 failure_code = 3;\n  // The failure reason messaged\n  string failure_message = 4;\n}\n")),(0,r.kt)("h3",{id:"swaprequest"},"SwapRequest"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"SwapRequest")," message is sent by the ",(0,r.kt)("strong",{parentName:"p"},"Proposer")," to the ",(0,r.kt)("strong",{parentName:"p"},"Responder")," to start the swap negotiation. The transaction is a PSET base64 encoded string containing the Proposer's inputs and outputs (amount_r and eventual change)."),(0,r.kt)("h3",{id:"swapaccept"},"SwapAccept"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"SwapAccept")," message is sent by the ",(0,r.kt)("strong",{parentName:"p"},"Responder")," to the ",(0,r.kt)("strong",{parentName:"p"},"Proposer")," to accept the swap request."),(0,r.kt)("h3",{id:"swapcomplete"},"SwapComplete"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"SwapComplete")," message is sent by ",(0,r.kt)("strong",{parentName:"p"},"Proposer")," to the ",(0,r.kt)("strong",{parentName:"p"},"Responder")," to announce the successful completion of the swap. "),(0,r.kt)("h3",{id:"swapfail"},"SwapFail"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"SwapFail")," message can be sent by either side of the swap protocol, at any time, to announce the swap termination.\n",(0,r.kt)("inlineCode",{parentName:"p"},"failure_code")," is an optional parameter for specifying the failure reason. TBD"))}u.isMDXComponent=!0}}]);